version: 0.2

env:
  variables:
    # Customize these variables for your project
    DOCKER_CONTAINER_NAME: "my-springboot-app"  # Must match ECS task definition
    MAVEN_OPTS: "-Dmaven.test.skip=true"        # Skip tests for faster builds

phases:
  install:
    runtime-versions:
      java: corretto17  # Uses Amazon Corretto JDK 17
    commands:
      - echo "Installing required tools..."
      - mvn -version    # Verify Maven is available (provided by CodeBuild)
      - java -version   # Verify Java version

  pre_build:
    commands:
      - echo "Pre-build phase started..."
      - echo "Building Java application with Maven..."
      - mvn clean install $MAVEN_OPTS

      - echo "Logging in to Amazon ECR..."
      - REPOSITORY_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}"
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

      - echo "Preparing Docker tags..."
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH}-$(date +%Y%m%d%H%M%S)

  build:
    commands:
      - echo "Build phase started..."
      - echo "Building Docker image..."
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Post-build phase started..."
      - echo "Pushing Docker images to ECR..."
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG

      - echo "Generating imagedefinitions.json for ECS..."
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json  # Verify output

artifacts:
  files:
    - imagedefinitions.json
    - target/*.jar                # Saves your built Java artifact
  discard-paths: yes

cache:
  paths:
    - '/root/.m2/**/*'            # Caches Maven dependencies between builds
    - '/var/lib/docker/**/*'      # Caches Docker layers (if enabled)